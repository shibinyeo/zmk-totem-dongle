//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>

#define Base        0
#define Nav         1
#define Num         2
#define Mouse       3
#define MouseJump   4

&mt {
    quick-tap-ms = <100>;
    global-quick-tap;
    flavor = "tap-preferred";
    tapping-term-ms = <170>;
};

&lt {
    tapping-term-ms = <240>;
    flavor = "balanced";
    quick-tap-ms = <150>;
};

&mmv {
    acceleration-exponent = <1>;      // 1
    time-to-max-speed-ms = <500>;    // 40
    delay-ms = <0>;                   // 0
};

/ {
    behaviors {
        hml: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <120>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <0 1 2 12 3 4 0 10 11 13 14 20 21 22 23 24 25 32 33 34>;
            require-prior-idle-ms = <25>;
            hold-trigger-on-release;
        };

        hmr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <120>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            require-prior-idle-ms = <25>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 26 27 28 29 30 31 35 36 37>;
        };
    };

    combos {
        compatible = "zmk,combos";

        caps {
            bindings = <&caps_word>;
            key-positions = <16 13 12 17>;
            layers = <0>;
            timeout-ms = <50>;
        };

        prev_workspace {
            bindings = <&kp LC(LA(LS(TAB)))>;
            key-positions = <35 9>;
        };

        escape {
            bindings = <&kp ESCAPE>;
            key-positions = <36 19>;
        };

        switch_window {
            bindings = <&kp LA(TAB)>;
            key-positions = <34 0>;
        };

        workspace_1 {
            bindings = <&kp LS(LA(LC(NUMBER_1)))>;
            key-positions = <37 27>;
        };

        workspace_2 {
            bindings = <&kp LS(LA(LC(NUMBER_2)))>;
            key-positions = <37 28>;
        };

        workspace_3 {
            bindings = <&kp LS(LA(LC(NUMBER_3)))>;
            key-positions = <37 29>;
        };

        workspace_4 {
            bindings = <&kp LS(LA(LC(NUMBER_4)))>;
            key-positions = <37 16>;
        };

        workspace_5 {
            bindings = <&kp LS(LA(LC(N5)))>;
            key-positions = <37 17>;
        };

        workspace_6 {
            bindings = <&kp LS(LA(LC(NUMBER_6)))>;
            key-positions = <37 18>;
        };

        workspace_7 {
            bindings = <&kp LS(LA(LC(N7)))>;
            key-positions = <37 6>;
        };

        workspace_8 {
            bindings = <&kp LS(LA(LC(N8)))>;
            key-positions = <37 7>;
        };

        workspace_9 {
            bindings = <&kp LS(LA(LC(N9)))>;
            key-positions = <37 8>;
        };

        tmux_copy_mode {
            bindings = <&tcm>;
            key-positions = <3 2 7 6>;
        };

        copy {
            bindings = <&kp K_COPY>;
            key-positions = <17 23>;
        };

        cut {
            bindings = <&kp K_CUT>;
            key-positions = <22>;
        };

        paste {
            bindings = <&kp K_PASTE>;
            key-positions = <25>;
        };
    };

    macros {
        pw: pw {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N5 &kp N6 &kp N5 &kp N6 &kp N &kp O &kp LS(P) &kp EXCL &kp S &kp T &kp O &kp EXCL>;
            label = "PW";
            wait-ms = <5>;
            tap-ms = <5>;
        };

        sb: sb {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp Y &kp E &kp O &kp S &kp H &kp I &kp B &kp I &kp N &kp N9 &kp N7 &kp AT &kp G &kp M &kp A &kp I &kp L &kp DOT &kp C &kp O &kp M>;
            label = "SB";
            wait-ms = <5>;
            tap-ms = <5>;
        };

        rh: rh {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp S &kp H &kp Y &kp E &kp O &kp AT &kp R &kp E &kp D &kp H &kp A &kp T &kp DOT &kp C &kp O &kp M>;
            label = "RH";
            wait-ms = <5>;
            tap-ms = <5>;
        };

        tcm: tmux_copy_mode {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RC(B) &kp LEFT_BRACKET>;
            label = "TMUX_COPY_MODE";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            label = "Base";
            bindings = <
         &kp Q        &kp W        &kp F           &kp P          &kp B    &kp J  &kp L          &kp U         &kp Y        &kp SQT
         &hml LGUI A  &hml LALT R  &hml LCTRL S    &hml LSHIFT T  &kp G    &kp M  &hmr RSHFT N   &hmr RCTRL E  &hmr RALT I  &hmr RGUI O
&kp TAB  &kp Z        &kp X        &kp C           &kp D          &kp V    &kp K  &kp H          &kp COMMA     &kp DOT      &kp SLASH    &kp SEMICOLON
                                   &kp LEFT_SHIFT  &kp SPACE      &mo 2    &mo 1  &kp BACKSPACE  &kp ENTER
            >;
        };

        Nav {
            label = "Nav";
            bindings = <
        &kp F2        &kp F3        &kp F4     &kp F5             &kp F6             &kp F7    &kp F8         &kp F9       &kp F10    &kp F11
        &kp LEFT_GUI  &kp LEFT_ALT  &kp LCTRL  &kp LEFT_SHIFT     &none              &kp LEFT  &kp DOWN       &kp UP       &kp RIGHT  &kp PRINTSCREEN
&kp F1  &sb           &rh           &pw        &none              &none              &kp HOME  &kp PAGE_DOWN  &kp PAGE_UP  &kp END    &kp DELETE       &kp F12
                                    &none      &kp C_VOLUME_DOWN  &kp C_VOLUME_UP    &none     &none          &soft_off
            >;
        };

        Num {
            label = "Num";
            bindings = <
       &kp GRAVE  &kp MINUS  &kp EQUAL  &none         &kp LEFT_PARENTHESIS    &kp RIGHT_PARENTHESIS  &kp N7         &kp N8  &kp N9  &kp BACKSLASH
       &kp LGUI   &kp LALT   &kp LCTRL  &kp LSHFT     &kp LEFT_BRACKET        &kp RIGHT_BRACKET      &kp N4         &kp N5  &kp N6  &kp SEMICOLON
&none  &none      &none      &none      &none         &kp LEFT_BRACE          &kp RIGHT_BRACE        &kp N1         &kp N2  &kp N3  &none          &bt BT_CLR_ALL
                             &soft_off  &out OUT_TOG  &none                   &kp PERIOD             &kp BACKSPACE  &kp N0
            >;
        };

        Mouse {
            label = "Mouse";
            bindings = <
       &none  &none  &mkp RCLK  &mkp LCLK  &none    &none           &none           &none           &none            &none
       &none  &none  &none      &mo 4      &none    &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP    &mmv MOVE_RIGHT  &none
&none  &none  &none  &none      &none      &none    &msc MOVE_LEFT  &msc MOVE_UP    &msc MOVE_DOWN  &msc MOVE_RIGHT  &none  &none
                     &none      &none      &none    &none           &none           &none
            >;
        };

        MouseJump {
            label = "MouseJump";
            bindings = <
       &none  &none  &none  &none  &none    &none              &none              &none              &none              &none
       &none  &none  &none  &none  &none    &kp LS(LA(LC(M)))  &kp LS(LA(LC(N)))  &kp LA(LS(LC(E)))  &kp LS(LA(LC(I)))  &none
&none  &none  &none  &none  &none  &none    &none              &none              &none              &none              &none  &none
                     &none  &none  &none    &none              &none              &none
            >;
        };
    };
};

